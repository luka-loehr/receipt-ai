#!/usr/bin/env python3
"""
Minimal Google OAuth setup for Receipt Printer

This script performs only the Google OAuth authorization flow and saves a
unified token for Gmail, Calendar, and Tasks into
  token_autogenerated/unified_google_token.json

Requirements:
- A Google Cloud OAuth client credentials file (desktop app) placed at the path
  specified by GOOGLE_CREDENTIALS_FILE (defaults to cloud_credentials/google_credentials.json)

Usage:
  python oauth_setup.py
"""

import os
from pathlib import Path


def print_header() -> None:
    print("GOOGLE OAUTH SETUP")
    print("===================\n")


def ensure_directories() -> None:
    Path("token_autogenerated").mkdir(parents=True, exist_ok=True)


def get_credentials_file_path() -> str:
    """Find a Google OAuth client credentials JSON in cloud_credentials/.

    Behavior:
    - If GOOGLE_CREDENTIALS_FILE is set and exists, use it.
    - Otherwise, autodetect any .json in cloud_credentials/. If one found, use it.
    - If multiple found, prompt user to choose.
    - If none found, return default expected path for guidance.
    """
    env_path = os.getenv("GOOGLE_CREDENTIALS_FILE")
    if env_path and os.path.exists(env_path):
        return env_path

    folder = Path("cloud_credentials")
    folder.mkdir(parents=True, exist_ok=True)
    json_files = sorted([str(p) for p in folder.glob("*.json")])

    if len(json_files) == 1:
        return json_files[0]
    elif len(json_files) > 1:
        print("Found multiple OAuth JSON files:")
        for idx, path in enumerate(json_files, start=1):
            print(f"  {idx}. {path}")
        choice = input("Select credentials file by number: ").strip()
        if choice.isdigit():
            i = int(choice)
            if 1 <= i <= len(json_files):
                return json_files[i - 1]
        # Fallback to first if invalid input
        return json_files[0]

    # None found: suggest default placement
    return str(folder / "google_credentials.json")


def check_google_credentials() -> bool:
    creds_path = get_credentials_file_path()
    if os.path.exists(creds_path):
        print(f"‚úÖ Found Google OAuth client file: {creds_path}")
        print("   Ensure these APIs are enabled in Google Cloud Console:")
        print("   - Gmail API")
        print("   - Google Calendar API")
        print("   - Google Tasks API")
        return True
    print("‚ùå Google OAuth client file not found")
    print("   Place your OAuth client JSON in cloud_credentials/ (any .json filename).")
    print(f"   Suggested path: {creds_path}")
    return False


def unified_google_oauth() -> bool:
    try:
        from google.auth.transport.requests import Request
        from google.oauth2.credentials import Credentials
        from google_auth_oauthlib.flow import InstalledAppFlow

        SCOPES = [
            "https://www.googleapis.com/auth/gmail.readonly",
            "https://www.googleapis.com/auth/calendar.readonly",
            "https://www.googleapis.com/auth/tasks.readonly",
        ]

        token_path = "token_autogenerated/unified_google_token.json"
        creds: Credentials | None = None

        if os.path.exists(token_path):
            creds = Credentials.from_authorized_user_file(token_path, SCOPES)

        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                creds_file = get_credentials_file_path()
                flow = InstalledAppFlow.from_client_secrets_file(creds_file, SCOPES)
                creds = flow.run_local_server(port=0)

            with open(token_path, "w") as token_file:
                token_file.write(creds.to_json())

        return True
    except Exception as e:
        print(f"‚ùå OAuth error: {e}")
        return False


def main() -> None:
    print_header()
    ensure_directories()

    if not check_google_credentials():
        return

    print("This will open your browser to authorize Gmail, Calendar, and Tasks.")
    proceed = input("Proceed with Google OAuth? (y/n): ").strip().lower()
    if proceed != "y":
        print("‚è≠Ô∏è  Skipped OAuth setup")
        return

    if unified_google_oauth():
        print("\nüéâ Google OAuth completed successfully!")
        print("   Saved token: token_autogenerated/unified_google_token.json")
    else:
        print("\n‚ùå Google OAuth failed. See messages above.")


if __name__ == "__main__":
    main()


