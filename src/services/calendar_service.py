#!/usr/bin/env python3
"""
Calendar Service Module
Handles Google Calendar data fetching
"""

import os
from typing import List
from datetime import datetime, timedelta
from ..models import CalendarEvent
from ..config import AppConfig


class CalendarService:
    """Handles Google Calendar data fetching"""
    
    def __init__(self, config: AppConfig):
        self.config = config
        # Use the unified Google credentials file
        self.credentials_file = 'cloud_credentials/google_credentials.json'
        self.timezone = config.timezone
        
        # Check if unified token exists
        if not os.path.exists('token_autogenerated/unified_google_token.json'):
            print("⚠️  Warning: No Google unified token found. Calendar data will be mocked.")
    
    def _get_language_name(self) -> str:
        """Get language name - just return the string"""
        return self.config.language
    
    def get_upcoming_events(self) -> List[CalendarEvent]:
        """Get next calendar events (today, tomorrow, day after) - requires Google unified token"""
        if not os.path.exists('token_autogenerated/unified_google_token.json'):
            print("❌ No unified Google token found. Run setup.py to authorize.")
            return self._get_mock_events()
        
        try:
            # Real Google Calendar API integration
            from google.auth.transport.requests import Request
            from google.oauth2.credentials import Credentials
            from googleapiclient.discovery import build
            import pytz
            
            SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']
            
            # Get credentials from unified token
            creds = None
            if os.path.exists('token_autogenerated/unified_google_token.json'):
                creds = Credentials.from_authorized_user_file('token_autogenerated/unified_google_token.json', SCOPES)
            
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    print("❌ No valid unified Google token found. Run setup.py to authorize.")
                    return self._get_mock_events()
            
            # Build Calendar service
            service = build('calendar', 'v3', credentials=creds)
            
            # Get events from start of today to 3 days from now
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
            now = today_start.isoformat() + 'Z'  # Start from beginning of today
            end = (datetime.utcnow() + timedelta(days=3)).isoformat() + 'Z'
            
            events_result = service.events().list(
                calendarId='primary',
                timeMin=now,
                timeMax=end,
                maxResults=10,
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            print(f"   📅 Found {len(events)} events")
            
            calendar_data = []
            
            # Language-specific month and day names
            if self._get_language_name() == "german":
                months = {
                    1: 'Januar', 2: 'Februar', 3: 'März', 4: 'April', 5: 'Mai', 6: 'Juni',
                    7: 'Juli', 8: 'August', 9: 'September', 10: 'Oktober', 11: 'November', 12: 'Dezember'
                }
                days = {
                    0: 'Montag', 1: 'Dienstag', 2: 'Mittwoch', 3: 'Donnerstag', 
                    4: 'Freitag', 5: 'Samstag', 6: 'Sonntag'
                }
            else:  # English
                months = {
                    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',
                    7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'
                }
                days = {
                    0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 
                    4: 'Friday', 5: 'Saturday', 6: 'Sunday'
                }
            
            for event in events:
                start = event['start'].get('dateTime', event['start'].get('date'))
                end = event['end'].get('dateTime', event['end'].get('date'))
                
                if 'dateTime' in event['start']:
                    # Time-specific event
                    start_dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                    end_dt = datetime.fromisoformat(end.replace('Z', '+00:00'))
                    start_time = start_dt.strftime("%H:%M")
                    end_time = end_dt.strftime("%H:%M")
                    start_date = start_dt.strftime("%Y-%m-%d")
                    
                    # Create localized datetime string
                    day_name = days[start_dt.weekday()]
                    month_name = months[start_dt.month]
                    if self._get_language_name() == "german":
                        start_datetime = f"{day_name}, {start_dt.day}. {month_name} {start_dt.year} um {start_time}"
                    else:
                        start_datetime = f"{day_name}, {month_name} {start_dt.day}, {start_dt.year} at {start_time}"
                    is_all_day = False
                else:
                    # All-day event
                    start_dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                    start_time = "All Day" if self._get_language_name() == "english" else "Ganztägig"
                    end_time = ""
                    start_date = start_dt.strftime("%Y-%m-%d")
                    
                    # Create localized datetime string
                    day_name = days[start_dt.weekday()]
                    month_name = months[start_dt.month]
                    if self._get_language_name() == "german":
                        start_datetime = f"{day_name}, {start_dt.day}. {month_name} {start_dt.year} (ganztägig)"
                    else:
                        start_datetime = f"{day_name}, {month_name} {start_dt.day}, {start_dt.year} (all day)"
                    is_all_day = True
                
                calendar_data.append(CalendarEvent(
                    title=event['summary'],
                    start_time=start_time,
                    end_time=end_time,
                    location=event.get('location', ''),
                    description=event.get('description', ''),
                    is_all_day=is_all_day,
                    start_date=start_date,
                    start_datetime=start_datetime
                ))
            
            return calendar_data
            
        except Exception as e:
            print(f"⚠️  Calendar service error: {e}")
            return self._get_mock_events()
    
    def _get_mock_events(self) -> List[CalendarEvent]:
        """Return mock calendar events when API is unavailable"""
        today = datetime.now()
        tomorrow = today + timedelta(days=1)
        
        if self._get_language_name() == "german":
            return [
                CalendarEvent(
                    title="Team Meeting",
                    start_time="10:00",
                    end_time="11:00",
                    location="Büro",
                    description="Wöchentliches Team Meeting",
                    is_all_day=False,
                    start_date=today.strftime("%Y-%m-%d"),
                    start_datetime=f"Heute um 10:00"
                ),
                CalendarEvent(
                    title="Arzttermin",
                    start_time="14:30",
                    end_time="15:00",
                    location="Praxis Dr. Schmidt",
                    description="Routineuntersuchung",
                    is_all_day=False,
                    start_date=tomorrow.strftime("%Y-%m-%d"),
                    start_datetime=f"Morgen um 14:30"
                )
            ]
        else:
            return [
                CalendarEvent(
                    title="Team Meeting",
                    start_time="10:00",
                    end_time="11:00",
                    location="Office",
                    description="Weekly team meeting",
                    is_all_day=False,
                    start_date=today.strftime("%Y-%m-%d"),
                    start_datetime="Today at 10:00"
                ),
                CalendarEvent(
                    title="Doctor Appointment",
                    start_time="14:30", 
                    end_time="15:00",
                    location="Medical Center",
                    description="Routine checkup",
                    is_all_day=False,
                    start_date=tomorrow.strftime("%Y-%m-%d"),
                    start_datetime="Tomorrow at 14:30"
                )
            ]


def create_calendar_service(config: AppConfig) -> CalendarService:
    """Factory function to create calendar service"""
    return CalendarService(config)
