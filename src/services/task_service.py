#!/usr/bin/env python3
"""
Task Service Module
Handles Google Tasks data fetching
"""

import os
import datetime
from typing import List
from ..models import TaskData
from ..config import AppConfig


class TaskService:
    """Handles Google Tasks data fetching"""
    
    def __init__(self, config: AppConfig):
        self.config = config
        # Use the unified Google credentials file
        self.credentials_file = 'cloud_credentials/google_credentials.json'
        self.max_tasks = config.max_tasks_to_process
        
        # Check if unified token exists
        if not os.path.exists('token_autogenerated/unified_google_token.json'):
            print("⚠️  Warning: No Google unified token found. Task data will be mocked.")
    
    def _get_language_name(self) -> str:
        """Get language name - just return the string"""
        return self.config.language
    
    def get_tasks(self) -> List[TaskData]:
        """Get recent tasks - requires Google unified token"""
        if not os.path.exists('token_autogenerated/unified_google_token.json'):
            print("❌ No unified Google token found. Run setup.py to authorize.")
            return self._get_mock_tasks()
        
        try:
            # Real Google Tasks API integration
            from google.auth.transport.requests import Request
            from google.oauth2.credentials import Credentials
            from googleapiclient.discovery import build
            
            SCOPES = ['https://www.googleapis.com/auth/tasks.readonly']
            
            # Get credentials from unified token
            creds = None
            if os.path.exists('token_autogenerated/unified_google_token.json'):
                creds = Credentials.from_authorized_user_file('token_autogenerated/unified_google_token.json', SCOPES)
            
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    print("❌ No valid unified Google token found. Run setup.py to authorize.")
                    return self._get_mock_tasks()
            
            # Build Tasks service
            service = build('tasks', 'v1', credentials=creds)
            
            # Get tasks from the default task list
            # First get the default task list
            task_lists = service.tasklists().list().execute()
            default_list = None
            
            # Find the default task list (usually "@default")
            for task_list in task_lists.get('items', []):
                if task_list.get('id') == '@default':
                    default_list = task_list
                    break
            
            if not default_list:
                # If no @default list, use the first available one
                default_list = task_lists.get('items', [{}])[0]
            
            list_id = default_list.get('id')
            
            # Get tasks from the selected list
            tasks_result = service.tasks().list(
                tasklist=list_id,
                maxResults=self.max_tasks,
                showCompleted=False,  # Only show incomplete tasks
                showHidden=False
            ).execute()
            
            tasks = tasks_result.get('items', [])
            task_data = []
            
            print(f"   ✅ Found {len(tasks)} tasks")
            
            # Process all tasks first
            for task in tasks:
                # Skip completed tasks
                if task.get('status') == 'completed':
                    continue
                
                # Parse due date if available
                due_date = ""
                if 'due' in task:
                    try:
                        due_dt = datetime.datetime.fromisoformat(task['due'].replace('Z', '+00:00'))
                        due_date = due_dt.strftime("%Y-%m-%d")
                    except:
                        due_date = task['due']
                
                # Determine priority
                priority = "medium"
                if 'notes' in task and task['notes']:
                    notes_lower = task['notes'].lower()
                    if any(word in notes_lower for word in ['urgent', 'high', 'important']):
                        priority = "high"
                    elif any(word in notes_lower for word in ['low', 'optional']):
                        priority = "low"
                
                task_data.append(TaskData(
                    title=task.get('title', 'Untitled Task'),
                    notes=task.get('notes', ''),
                    due_date=due_date,
                    completed=False,
                    priority=priority,
                    task_id=task.get('id', '')
                ))
            
            # Sort tasks by priority: due tasks first (overdue, then due soon), then no due date
            def task_sort_key(task):
                if task.due_date:
                    try:
                        due_dt = datetime.datetime.strptime(task.due_date, "%Y-%m-%d")
                        now = datetime.datetime.now()
                        days_until_due = (due_dt - now).days
                        
                        # Overdue tasks get highest priority (negative numbers sort first)
                        if days_until_due < 0:
                            return (0, days_until_due)  # Overdue: sort by how overdue
                        # Due soon (within 7 days) get medium priority
                        elif days_until_due <= 7:
                            return (1, days_until_due)  # Due soon: sort by days until due
                        # Future tasks get lower priority
                        else:
                            return (2, days_until_due)  # Future: sort by days until due
                    except:
                        return (3, 0)  # Invalid due date: lowest priority
                else:
                    return (3, 0)  # No due date: lowest priority
            
            # Sort tasks by priority
            task_data.sort(key=task_sort_key)
            
            return task_data
            
        except Exception as e:
            print(f"⚠️  Task service error: {e}")
            return self._get_mock_tasks()
    
    def get_tasks_from_list(self, list_name: str) -> List[TaskData]:
        """Get tasks from a specific task list by name"""
        if not os.path.exists('token_autogenerated/unified_google_token.json'):
            print("❌ No unified Google token found. Run setup.py to authorize.")
            return self._get_mock_shopping_items()
        
        try:
            # Real Google Tasks API integration
            from google.auth.transport.requests import Request
            from google.oauth2.credentials import Credentials
            from googleapiclient.discovery import build
            
            SCOPES = ['https://www.googleapis.com/auth/tasks.readonly']
            
            # Get credentials from unified token
            creds = None
            if os.path.exists('token_autogenerated/unified_google_token.json'):
                creds = Credentials.from_authorized_user_file('token_autogenerated/unified_google_token.json', SCOPES)
            
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    return self._get_mock_shopping_items()
            
            # Build Tasks service
            service = build('tasks', 'v1', credentials=creds)
            
            # Get all task lists
            task_lists = service.tasklists().list().execute()
            target_list = None
            
            # Find the task list by name
            for task_list in task_lists.get('items', []):
                if task_list.get('title', '').lower() == list_name.lower():
                    target_list = task_list
                    break
            
            if not target_list:
                # List not found - print available lists for debugging
                available_lists = [tl.get('title', 'Untitled') for tl in task_lists.get('items', [])]
                print(f"   ⚠️  List '{list_name}' not found. Available lists: {available_lists}")
                return self._get_mock_shopping_items()
            
            list_id = target_list.get('id')
            
            # Get tasks from the specific list
            tasks_result = service.tasks().list(
                tasklist=list_id,
                maxResults=self.max_tasks,
                showCompleted=False,  # Only show incomplete tasks
                showHidden=False
            ).execute()
            
            tasks = tasks_result.get('items', [])
            task_data = []
            
            # Process tasks (same logic as get_tasks)
            for task in tasks:
                # Skip completed tasks
                if task.get('status') == 'completed':
                    continue
                
                # Parse due date if available
                due_date = ""
                if 'due' in task:
                    try:
                        due_dt = datetime.datetime.fromisoformat(task['due'].replace('Z', '+00:00'))
                        due_date = due_dt.strftime("%Y-%m-%d")
                    except:
                        due_date = task['due']
                
                # Determine priority
                priority = "medium"
                if 'notes' in task and task['notes']:
                    notes_lower = task['notes'].lower()
                    if any(word in notes_lower for word in ['urgent', 'high', 'important']):
                        priority = "high"
                    elif any(word in notes_lower for word in ['low', 'optional']):
                        priority = "low"
                
                task_data.append(TaskData(
                    title=task.get('title', 'Untitled Task'),
                    notes=task.get('notes', ''),
                    due_date=due_date,
                    completed=False,
                    priority=priority,
                    task_id=task.get('id', '')
                ))
            
            return task_data
            
        except Exception as e:
            print(f"⚠️  Error fetching tasks from list '{list_name}': {e}")
            return self._get_mock_shopping_items()
    
    def get_shopping_list(self) -> List[TaskData]:
        """Get shopping list using the configured shopping list name"""
        shopping_list_name = self.config.get_shopping_list_name_localized()
        return self.get_tasks_from_list(shopping_list_name)
    
    def _get_mock_tasks(self) -> List[TaskData]:
        """Return mock task data when API is unavailable"""
        if self._get_language_name() == "german":
            return [
                TaskData(
                    title="E-Mails beantworten",
                    notes="Wichtige E-Mails von heute durchgehen",
                    due_date=datetime.datetime.now().strftime("%Y-%m-%d"),
                    completed=False,
                    priority="high",
                    task_id="mock_task_1"
                ),
                TaskData(
                    title="Projekt Präsentation vorbereiten",
                    notes="Folien für morgiges Meeting erstellen",
                    due_date=(datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%Y-%m-%d"),
                    completed=False,
                    priority="high",
                    task_id="mock_task_2"
                ),
                TaskData(
                    title="Zahnarzttermin vereinbaren",
                    notes="Routineuntersuchung",
                    due_date="",
                    completed=False,
                    priority="medium",
                    task_id="mock_task_3"
                )
            ]
        else:
            return [
                TaskData(
                    title="Respond to emails",
                    notes="Check important emails from today",
                    due_date=datetime.datetime.now().strftime("%Y-%m-%d"),
                    completed=False,
                    priority="high",
                    task_id="mock_task_1"
                ),
                TaskData(
                    title="Prepare project presentation",
                    notes="Create slides for tomorrow's meeting",
                    due_date=(datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%Y-%m-%d"),
                    completed=False,
                    priority="high",
                    task_id="mock_task_2"
                ),
                TaskData(
                    title="Schedule dentist appointment",
                    notes="Routine checkup",
                    due_date="",
                    completed=False,
                    priority="medium",
                    task_id="mock_task_3"
                )
            ]
    
    def _get_mock_shopping_items(self) -> List[TaskData]:
        """Return mock shopping items when API is unavailable"""
        if self._get_language_name() == "german":
            return [
                TaskData(
                    title="Milch",
                    notes="1 Liter fettarm",
                    due_date="",
                    completed=False,
                    priority="medium",
                    task_id="mock_shop_1"
                ),
                TaskData(
                    title="Brot",
                    notes="Vollkornbrot",
                    due_date="",
                    completed=False,
                    priority="medium",
                    task_id="mock_shop_2"
                ),
                TaskData(
                    title="Äpfel",
                    notes="2kg",
                    due_date="",
                    completed=False,
                    priority="medium",
                    task_id="mock_shop_3"
                )
            ]
        else:
            return [
                TaskData(
                    title="Milk",
                    notes="1 liter low-fat",
                    due_date="",
                    completed=False,
                    priority="medium",
                    task_id="mock_shop_1"
                ),
                TaskData(
                    title="Bread",
                    notes="Whole grain",
                    due_date="",
                    completed=False,
                    priority="medium",
                    task_id="mock_shop_2"
                ),
                TaskData(
                    title="Apples",
                    notes="2kg",
                    due_date="",
                    completed=False,
                    priority="medium",
                    task_id="mock_shop_3"
                )
            ]


def create_task_service(config: AppConfig) -> TaskService:
    """Factory function to create task service"""
    return TaskService(config)
